= Lab Instructions
:icons: font

== Files Of Interest
- `grails-app/domain/customjson/Person.groovy`
- `grails-app/domain/customjson/Car.groovy`
- `grails-app/views/person/index.gson`
- `grails-app/views/person/show.gson`
- `grails-app/views/person/_person.gson`
- `grails-app/views/car/index.gson`
- `grails-app/views/car/show.gson`
- `grails-app/views/car/_car.gson`
- `src/integration-test/groovy/customjson/CustomJsonPersonFunctionalSpec.groovy`
- `src/integration-test/groovy/customjson/CustomJsonCarFunctionalSpec.groovy`

== Notes

The `CustomJsonPersonFunctionalSpec` and `CustomJsonCarFunctionalSpec`
functional tests interact with RESTful apis which do not yet exist.  You will
need to define that api in order to satisfy these tests.

== Running The Tests

The `integrationTest` task will run all of the integration tests.

    ./gradlew integrationTest

The `integrationTest` task may be abbreviated to `iT`.

    ./gradlew iT

== Satisfying CustomJsonPersonFunctionalSpec

The `CustomJsonPersonFunctionalSpec` is sending requests to the api at
http://localhost:8080/people which needs to be written.

The `Person` domain class is currently empty.  One of the things you
will need to do is define `firstName` and `lastName` properties in the class.
Both of those properties should be of type `String`.

Once the properties have been defined in the `Person` class, create
an api by annotating the `Person` class with `grails.rest.Resource`.
You will need to specify a value for the `uri` attribute when applying
the annotation.  The value of the `uri` attribute needs to be consistent
with where the test expects the api to be.

With all of that in place, the REST api should be operational.  If a request
is sent to http://localhost:8080/people.json to retrieve a JSON representation
of the people in the data base, the generated JSON would be structured like
the following:

[source,json]
----
[
    {
        "id": 1,
        "firstName": "Robert",
        "lastName": "Fripp"
    },
    {
        "id": 2,
        "firstName": "Bill",
        "lastName": "Bruford"
    },
    {
        "id": 3,
        "firstName": "John",
        "lastName": "Wetton"
    }
]
----

The JSON above is generated by the default JSON renderer provided by the
framework.  The goal of this exercise is to use
http://docs.grails.org/latest/guide/webServices.html#jsonViews[JSON Views]
to customize the generated JSON. `CustomJsonPersonFunctionalSpec` describes
the requirements for the desired JSON structure.

[source,groovy]
----
include::{projectdir}/src/integration-test/groovy/customjson/CustomJsonPersonFunctionalSpec.groovy[indent=0]
----

Notice that the properties in the `Person` class are named `firstName` and
`lastName` but the test expects the generated JSON to include the keys
`givenName` and `surname`.  This may be achieved by customizing
`grails-app/views/person/_person.gson`.  Initially the file looks like this:

[source,groovy]
----
include::{projectdir}/grails-app/views/person/_person.gson[indent=0]
----

The call to `json g.render(person)` is invoking the default renderer that will
convert a `Person` instance into JSON.  That line of code will need to be
replaced with something like this:

[source,groovy]
----
json {
    // describe the structure of the generated JSON here
}
----

NOTE: You should be able to make the `CustomJsonPersonFunctionalSpec` tests pass
by making changes to `Person.groovy` and `grails-app/views/person/_person.gson`
only.  No other changes are required.

== Satisfying CustomJsonCarFunctionalSpec

The `CustomJsonCarFunctionalSpec` is sending requests to the api at
http://localhost:8080/automobiles which is created by way of the `@Resource`
annotation on the `Car` class.

[source,groovy]
----
include::{projectdir}/grails-app/domain/customjson/Car.groovy[indent=0]
----

The goal of this exercise is to use
http://docs.grails.org/latest/guide/webServices.html#jsonViews[JSON Views]
to define the JSON responses that will be generated by the api at `/automobiles`.
`CustomJsonPersonFunctionalSpec` describes the expected JSON structure.

[source,groovy]
----
include::{projectdir}/src/integration-test/groovy/customjson/CustomJsonCarFunctionalSpec.groovy[indent=0]
----

Notice that the properties in the `Car` class are named `make` and
`model` but the test expects the generated JSON to include the keys
`manufacturer` and `series`.  This may be achieved by defining the following
files which do not already exist:

- `grails-app/views/car/index.gson`
- `grails-app/views/car/show.gson`
- `grails-app/views/car/_car.gson`

Use the corresponding files that are defined under `grails-app/views/person/`
as examples for how to author the three files mentioned above.

NOTE: You should be able to make the `CustomJsonCarFunctionalSpec` tests pass
by creating the three `.gson` files under `grails-app/views/car/`.  No other
changes are required.
